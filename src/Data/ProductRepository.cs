using Core;
using Dapper;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;

namespace Data
{
    public class ProductRepository : IProductRepository
    {
        private readonly IDbConnectionFactory _dbConnectionFactory;

        public ProductRepository(IDbConnectionFactory dbConnectionFactory)
        {
            _dbConnectionFactory = dbConnectionFactory;
        }

        public async Task<Product> GetByIdAsync(int sysNo)
        {
            using (var connection = _dbConnectionFactory.CreateConnection())
            {
                // Ensure the table and column names match your database schema
                return await connection.QuerySingleOrDefaultAsync<Product>("SELECT * FROM Products WHERE SysNo = @SysNo", new { SysNo = sysNo });
            }
        }

        public async Task<IEnumerable<Product>> GetAllAsync()
        {
            using (var connection = _dbConnectionFactory.CreateConnection())
            {
                // Ensure the table name matches your database schema
                return await connection.QueryAsync<Product>("SELECT * FROM Products");
            }
        }

        public async Task AddAsync(Product product)
        {
            using (var connection = _dbConnectionFactory.CreateConnection())
            {
                // Ensure the table and column names match your database schema
                // Note: SysNo is often an identity column and might not need to be inserted explicitly if auto-generated by the database.
                // Adjust the SQL query as per your database schema (e.g., if SysNo is auto-increment)
                var sql = "INSERT INTO Products (ProductName, Status, Price, Inventory) VALUES (@ProductName, @Status, @Price, @Inventory); SELECT CAST(SCOPE_IDENTITY() as int)";
                // If SysNo is not an identity column or you want to specify it:
                // var sql = "INSERT INTO Products (SysNo, ProductName, Status, Price, Inventory) VALUES (@SysNo, @ProductName, @Status, @Price, @Inventory)";
                product.SysNo = await connection.QuerySingleAsync<int>(sql, product);
            }
        }

        public async Task UpdateAsync(Product product)
        {
            using (var connection = _dbConnectionFactory.CreateConnection())
            {
                // Ensure the table and column names match your database schema
                var sql = "UPDATE Products SET ProductName = @ProductName, Status = @Status, Price = @Price, Inventory = @Inventory WHERE SysNo = @SysNo";
                await connection.ExecuteAsync(sql, product);
            }
        }

        public async Task DeleteAsync(int sysNo)
        {
            using (var connection = _dbConnectionFactory.CreateConnection())
            {
                // Ensure the table name matches your database schema
                await connection.ExecuteAsync("DELETE FROM Products WHERE SysNo = @SysNo", new { SysNo = sysNo });
            }
        }
    }
}
